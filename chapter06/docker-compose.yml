version: '3.4'

services:
  consumer:
    image: ${DOCKER_REGISTRY-}consumer
    build:
      context: .
      dockerfile: consumer/Dockerfile
  
  producer:
    image: ${DOCKER_REGISTRY-}producer
    build:
      context: .
      dockerfile: producer/Dockerfile

    ports:
    - "5000:80"

  zookeeper:
    image: bitnami/zookeeper
    hostname: zookeeper
    container_name: zookeeper
    ports:
    - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ALLOW_ANONYMOUS_LOGIN: "yes"
  
  broker1:
    image: bitnami/kafka
    hostname: broker1
    container_name: broker1
    depends_on:
    - zookeeper
    ports:
    - "29092:29092"
    environment:
      BROKER_ID: 1
      KAFKA_PORT: 9092
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENERS: EXTERNAL_SAME_HOST://:29092,INTERNAL://:9092
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://broker1:9092,EXTERNAL_SAME_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL_SAME_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      ALLOW_PLAINTEXT_LISTENER: "yes"
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      JMX_PORT: 9999

  broker2:
    image: bitnami/kafka
    hostname: broker2
    container_name: broker2
    depends_on:
    - zookeeper
    ports:
    - "29093:29093"
    environment:
      BROKER_ID: 2
      KAFKA_PORT: 9093
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENERS: EXTERNAL_SAME_HOST://:29093,INTERNAL://:9093
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://broker2:9093,EXTERNAL_SAME_HOST://localhost:29093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL_SAME_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      ALLOW_PLAINTEXT_LISTENER: "yes"
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      JMX_PORT: 10000

  kafka-ui:
    image: obsidiandynamics/kafdrop
    ports:
    - 9100:9000
    environment:
    - KAFKA_BROKERCONNECT=broker1:9092
    - JVM_OPTS=-Xms32M -Xmx64M
    depends_on:
    - broker1
    - broker2
